/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useMemo, useRef, useState } from "react";
import { useFrame, useGraph, useLoader } from "@react-three/fiber";
import { useAnimations, useFBX, useGLTF } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import { useControls } from "leva";
import * as THREE from "three";
import { useChat } from "../hooks/Hooks";

const corresponding = {
  A: "viseme_PP",
  B: "viseme_kk",
  C: "viseme_I",
  D: "viseme_AA",
  E: "viseme_O",
  F: "viseme_U",
  G: "viseme_FF",
  H: "viseme_TH",
  X: "viseme_PP",
};

export function Yucca(props) {
  const { playAudio, script, smoothMorphTarget, morphTargetSmoothing } =
    useControls({
      playAudio: false,
      smoothMorphTarget: true,
      morphTargetSmoothing: 0.5,
      script: {
        value: "audiotest",
        options: ["audiotest"],
      },
    });

  const { message, audio: hookAudio, lipsync: hookLipsync, loading} = useChat();

  const [audio, setAudio] = useState();
  const [lipsync, setLipsync] = useState();
  console.log("message at avatar:", message);
  console.log("lipsync at avatar:", lipsync);

  useEffect(() => {
    if (!message) {
      setAnimation("Idle");
      return;
    }
    setLipsync(hookLipsync);
    const audio = new Audio("data:audio/mp3;base64," + hookAudio);
    audio.play();
    setAudio(audio);
    audio.onended = () => {
      setAnimation("Idle");
    };
  }, [message, hookAudio, hookLipsync]);

  const { scene } = useGLTF("/models/yucca-visemes-attempt-7.glb");
  const { animations } = useGLTF("/models/yucca-animation.glb");

  console.log("animations:",animations);

  const group = useRef();
  const { actions, mixer } = useAnimations(animations, group);
  console.log("actions:", actions);
  const [animation, setAnimation] = useState(
    animations.find((a) => a.name === "Idle") ? "Idle" : animations[0].name,
  );

  console.log("current avatar animation:", animation);

  useEffect(() => {
    if (message && lipsync) {
      setAnimation("Talking"); // Set animation to a talking state
    } else {
      setAnimation("Idle"); // Idle animation if no message or lipsync
    }
  }, [message, lipsync]);

  useEffect(() => {
    if (loading)  {
      setAnimation("Thinking");
    } else {
      setAnimation("Idle");
    }
  }, [loading])

  useEffect(() => {
    actions[animation].reset().fadeIn(mixer.stats.actions.inUse === 0 ? 0 : 0.5).play();
    return () => actions[animation].fadeOut(0.5);
  }, [animation]);

  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);

  useFrame(() => {
    Object.values(corresponding).forEach((value) => {
      if (!smoothMorphTarget) {
        nodes.Head.morphTargetInfluences[
          nodes.Head.morphTargetDictionary[value]
        ] = 0;
      } else {
        nodes.Head.morphTargetInfluences[
          nodes.Head.morphTargetDictionary[value]
        ] = THREE.MathUtils.lerp(
          nodes.Head.morphTargetInfluences[
            nodes.Head.morphTargetDictionary[value]
          ],
          0,
          morphTargetSmoothing,
        );
      }
    });

    if (message && lipsync) {
      const currentAudioTime = audio.currentTime;
      for (let i = 0; i < lipsync.length; i++) {
        const mouthCue = lipsync[i];
        if (
          currentAudioTime >= mouthCue.start &&
          currentAudioTime <= mouthCue.end
        ) {
          const target = corresponding[mouthCue.value];
          if (!smoothMorphTarget) {
            nodes.Head.morphTargetInfluences[
              nodes.Head.morphTargetDictionary[target]
            ] = 1;
          } else {
            nodes.Head.morphTargetInfluences[
              nodes.Head.morphTargetDictionary[target]
            ] = THREE.MathUtils.lerp(
              nodes.Head.morphTargetInfluences[
                nodes.Head.morphTargetDictionary[target]
              ],
              1,
              morphTargetSmoothing,
            );
          }
          break;
        }
      }
    }
  });

  return (
    <group {...props} dispose={null} ref={group}>
      <skinnedMesh
        geometry={nodes.Hair.geometry}
        material={materials.Hair}
        skeleton={nodes.Hair.skeleton}
      />
      <skinnedMesh
        name="Head"
        geometry={nodes.Head.geometry}
        material={materials.SkinHead}
        skeleton={nodes.Head.skeleton}
        morphTargetDictionary={nodes.Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Head.morphTargetInfluences}
      />
      <skinnedMesh
        geometry={nodes.Limbs.geometry}
        material={materials.Limbs}
        skeleton={nodes.Limbs.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Tail.geometry}
        material={materials.Hair}
        skeleton={nodes.Tail.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Torso.geometry}
        material={materials.Torso}
        skeleton={nodes.Torso.skeleton}
      />
      <primitive object={nodes.spine} />
    </group>
  );
}

useGLTF.preload("/models/yucca-visemes-attempt-7.glb");
useGLTF.preload("/models/yucca-animation.glb");
